% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tTest.R
\name{plotSafeTDesignSampleSizeProfile}
\alias{plotSafeTDesignSampleSizeProfile}
\title{Plots the Sample Sizes Necessary for a Tolerable Alpha and Beta as a Function of deltaMin}
\usage{
plotSafeTDesignSampleSizeProfile(
  alpha = 0.05,
  beta = 0.2,
  maxN = 200,
  lowParam = 0.01,
  highParam = 1,
  tol = 0.1,
  testType = c("oneSample", "paired", "twoSample"),
  nsim = 1000L,
  alternative = c("two.sided", "greater", "less"),
  ratio = 1,
  deltaFactor = 0.5,
  nFactor = 2,
  simulateSafeOptioStop = FALSE,
  logging = FALSE,
  backTest = FALSE,
  seed = NULL,
  freqPlot = FALSE,
  pb = TRUE,
  ...
)
}
\arguments{
\item{alpha}{numeric in (0, 1) that specifies the tolerable type I error control --independent of n-- that the
designed test has to adhere to. Note that it also defines the rejection rule e10 > 1/alpha.}

\item{beta}{numeric in (0, 1) that specifies the tolerable type II error control necessary to calculate both
the sample sizes and deltaS, which defines the test. Note that 1-beta defines the power.}

\item{maxN}{numeric, the maximum number of samples one has budget for to collect data.}

\item{lowParam}{numeric that defines the smallest delta of our search space for the test-defining deltaS.}

\item{highParam}{numeric that defines the largest delta of our search space for the test-defining deltaS.}

\item{tol}{a number that defines the stepsizes between the lowParam and highParam.}

\item{testType}{either one of "oneSample", "paired", "twoSample".}

\item{nsim}{the number of replications, that is, experiments with max samples nPlan.}

\item{alternative}{a character string specifying the alternative hypothesis must be one of "two.sided" (default),
"greater" or "less".}

\item{ratio}{numeric > 0 representing the randomisation ratio of condition 2 over condition 1. If testType
is not equal to "twoSample", or if nPlan is of length(1) then ratio=1.}

\item{deltaFactor}{numeric, a factor to robustify the sequential determination (e.g., from deltaTrue = 0.9, to
deltaTrue = 0.8) of lowParam.}

\item{nFactor}{numeric, a factor to robustify the sequential determination (e.g., from deltaTrue = 0.9, to
deltaTrue = 0.8) of highN.}

\item{simulateSafeOptioStop}{logical, if \code{TRUE} then provides the simulation for safe tests.}

\item{logging}{logical, if \code{TRUE} then output all the safe designs objects including mean n stop if
simulateSafeOptioStop equal \code{TRUE}.}

\item{backTest}{logical, if \code{TRUE} it provides the frequentist sample size necessary to attain the power
that the safe test attains due to optional stopping.}

\item{seed}{To set the seed for the simulated data.}

\item{freqPlot}{logical, if \code{TRUE} plot frequentist sample size profiles.}

\item{pb}{logical, if \code{TRUE}, then show progress bar.}

\item{...}{further arguments to be passed to or from methods, but mainly to perform do.calls.}
}
\value{
Returns a list that contains the planned sample size needed for the frequentist and safe tests as a function
of the minimal clinically relevant effect sizes. The returned list contains at least the following components:

\describe{
  \item{alpha}{the tolerable type I error provided by the user.}
  \item{beta}{the tolerable type II error provided by the user.}
  \item{maxN}{the largest number of samples provided by the user.}
  \item{deltaDomain}{vector of the domain of deltaMin.}
  \item{allN1PlanFreq}{vector of the planned sample sizes needed for the frequentist test corresponding to
  alpha and beta.}
  \item{allN1PlanSafe}{vector of the planned sample sizes needed for the safe test corresponding to alpha
  and beta.}
  \item{allDeltaS}{vector of safe test defining deltaS.}
}
}
\description{
For given tolerable alpha and beta, (1) the planned sample sizes to using a safe test, (2) the
frequentist test, and (3) the average sample size necessary due to optional stopping are plotted
as a  function of the minimal clinically relevant standardised effect size deltaMin.
}
\examples{
plotSafeTDesignSampleSizeProfile(freqPlot=TRUE, backTest=TRUE)
}
