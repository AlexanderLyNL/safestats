% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tTest.R
\name{simulate.safeTDesign}
\alias{simulate.safeTDesign}
\title{Simulate function for a safeTDesign object}
\usage{
\method{simulate}{safeTDesign}(
  object,
  nsim = 1,
  seed = NULL,
  deltaTrue = NULL,
  muGlobal = 0,
  sigmaTrue = 1,
  lowN = 3,
  safeOptioStop = TRUE,
  freqOptioStop = FALSE,
  n1PlanFreq = NULL,
  n2PlanFreq = NULL,
  logging = TRUE,
  pb = TRUE,
  ...
)
}
\arguments{
\item{object}{A safeTDesign object}

\item{nsim}{numeric, number of iterations}

\item{seed}{numeric, seed number}

\item{deltaTrue}{numeric, if NULL, then deltaTrue <- object[["deltaMin"]]}

\item{muGlobal}{numeric, the true global mean of a paired or two-sample t-test. Its value shouldn't matter for the
test. This parameter treated is treated as a nuisance.}

\item{sigmaTrue}{numeric > 0,the true standard deviation of the data. Its value shouldn't matter for the test.
This parameter treated is treated as a nuisance.}

\item{lowN}{the smallest number of samples (first group) at which monitoring of the tests begins}

\item{safeOptioStop}{logical, TRUE implies that optional stopping simulation is performed for the safe test}

\item{freqOptioStop}{logical, TRUE implies that optional stopping simulation is performed for the frequentist test}

\item{n1PlanFreq}{integer, that defines the maximum number of samples to plan for (according to the frequentist
test,use designFreqT to find this)}

\item{n2PlanFreq}{optional integer, that defines the maximum number of samples of the second group to plan for}

\item{logging}{logical, if TRUE, then return the simulated data}

\item{pb}{logical, if TRUE, then show progress bar}

\item{...}{further arguments to be passed to or from methods.}
}
\value{
a safeTSim object
}
\description{
Simulate function for a safeTDesign object
}
\examples{
# Design safe test
alpha <- 0.05
beta <- 0.20
deltaMin <- 1
designObj <- designSafeT(deltaMin, alpha=alpha, beta=beta)

# Design frequentist test
freqObj <- designFreqT(deltaMin, alpha=alpha, beta=beta)

# Simulate based on deltaTrue=deltaMin
simResultsDeltaTrueIsDeltaMin <- simulate(object=designObj, nsim=100)

# Simulate based on deltaTrue > deltaMin
simResultsDeltaTrueIsLargerThanDeltaMin <- simulate(object=designObj, nsim=100, deltaTrue=2)

# Simulate under the null deltaTrue = 0
simResultsDeltaTrueIsNull <- simulate(object=designObj, nsim=100, deltaTrue=0)

simulate(object=designObj, deltraTrue=0, nsim=100, freqOptioStop=TRUE, n1PlanFreq=freqObj$n1PlanFreq, n2PlanFreq=freqObj$n2PlanFreq)

}
