% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tTest.R
\name{simulate.safeTDesign}
\alias{simulate.safeTDesign}
\title{Simulate function for a safeTDesign object}
\usage{
\method{simulate}{safeTDesign}(
  object,
  nsim = 1,
  seed = NULL,
  deltaTrue = NULL,
  muGlobal = 0,
  sigmaTrue = 1,
  lowN = 3,
  safeOptioStop = TRUE,
  freqOptioStop = FALSE,
  n1PlanFreq = NULL,
  n2PlanFreq = NULL,
  logging = TRUE,
  pb = TRUE,
  ...
)
}
\arguments{
\item{object}{A safeTDesign object}

\item{nsim}{numeric, number of iterations}

\item{seed}{numeric, seed number}

\item{deltaTrue}{numeric, if NULL, then deltaTrue <- object[["deltaMin"]]}

\item{muGlobal}{numeric, the true global mean of a paired or two-sample t-test. Its value shouldn't matter for the
test. This parameter treated is treated as a nuisance.}

\item{sigmaTrue}{numeric > 0,the true standard deviation of the data. Its value shouldn't matter for the test.
This parameter treated is treated as a nuisance.}

\item{lowN}{the smallest number of samples (first group) at which monitoring of the tests begins}

\item{safeOptioStop}{logical, \code{TRUE} implies that optional stopping simulation is performed for the safe test}

\item{freqOptioStop}{logical, \code{TRUE} implies that optional stopping simulation is performed for the frequentist test}

\item{n1PlanFreq}{integer, that defines the maximum number of samples to plan for (according to the frequentist
test,use designFreqT to find this)}

\item{n2PlanFreq}{optional integer, that defines the maximum number of samples of the second group to plan for}

\item{logging}{logical, if \code{TRUE}, then return the simulated data}

\item{pb}{logical, if \code{TRUE}, then show progress bar}

\item{...}{further arguments to be passed to or from methods.}
}
\value{
Returns an object of class "safeTSim". An object of class "safeTSim" is a list containing at least the
following components:

\describe{
  \item{n1Plan}{the planned sample size of the first group}
  \item{mu0}{the specified hypothesised value of the mean or mean difference depending on whether it was a one-sample
  or a two-sample test}
  \item{deltaS}{the deltaS that defines the safe test}
  \item{deltaMin}{the minimal clinical effect size provided by the user}
  \item{alpha}{the tolerable type I error provided by the user}
  \item{beta}{the tolerable type II error provided by the user}
  \item{lowDelta}{the smallest delta of the search space for delta provided by the user}
  \item{highDelta}{the largest delta of the search space for delta provided by the user}
  \item{tol}{the step size between lowDelta and highDelta provided by the user}
  \item{lowN}{the smallest n of the search space for n provided by the user}
  \item{highN}{the largest n of the search space for n provided by the user}
  \item{alternative}{any of "two.sided", "greater", "less" provided by the user}
  \item{testType}{any of "oneSampleT", "pairedSampleT", "twoSampleT" provided by the user}
  \item{sampleSizeRatio}{default is 1. Different from 1, whenever testType equals "twoSampleT", then it's defined
  sampleSizeRatio equals n2/n1}
  \item{pilot}{\code{FALSE} (default) specified by the user to indicate that the design is not a pilot study}
  \item{call}{the expression with which this function is called}
  \item{deltaTrue}{the true data generating delta specified by the user}
  \item{muGlobal}{the true (nuisance) global population mean, but nuisance parameter, of the data generating process
  specified by the user.}
  \item{sigmaTrue}{the true (nuisance) population standard deviation the data generating process specified by the
  user.}
  \item{paired}{if \code{TRUE} then paired t-test}
  \item{nsim}{the number of replications of the experiment.}
  \item{safeSim}{list with the simulation results of the safe test under optional stopping}
  \item{freqSim}{list with the simulation results of the frequentist test under optional stopping}
}
}
\description{
Simulate function for a safeTDesign object
}
\examples{
# Design safe test
alpha <- 0.05
beta <- 0.20
deltaMin <- 1
designObj <- designSafeT(deltaMin, alpha=alpha, beta=beta)

# Design frequentist test
freqObj <- designFreqT(deltaMin, alpha=alpha, beta=beta)

# Simulate based on deltaTrue=deltaMin
simResultsDeltaTrueIsDeltaMin <- simulate(object=designObj, nsim=100)

# Simulate based on deltaTrue > deltaMin
simResultsDeltaTrueIsLargerThanDeltaMin <- simulate(
  object=designObj, nsim=100, deltaTrue=2)

# Simulate under the null deltaTrue = 0
simResultsDeltaTrueIsNull <- simulate(
  object=designObj, nsim=100, deltaTrue=0)

simulate(object=designObj, deltraTrue=0, nsim=100, freqOptioStop=TRUE,
         n1PlanFreq=freqObj$n1PlanFreq, n2PlanFreq=freqObj$n2PlanFreq)

}
