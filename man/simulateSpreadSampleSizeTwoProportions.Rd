% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safe2x2Test.R
\name{simulateSpreadSampleSizeTwoProportions}
\alias{simulateSpreadSampleSizeTwoProportions}
\title{Simulate the spread of realized sample sizes during an optional stopping design setup.}
\usage{
simulateSpreadSampleSizeTwoProportions(
  safeDesign,
  M,
  parametersDataGeneratingDistribution,
  makePlot = FALSE
)
}
\arguments{
\item{safeDesign}{a safe design for a test of two proportions retrieved
through \code{\link{designSafeTwoProportions}}}

\item{M}{number of simulations to carry out}

\item{parametersDataGeneratingDistribution}{group means a and b in the data
generating distribution to simulate from.}

\item{makePlot}{logical indicating whether a histogram of stopping times should be
plotted.}
}
\value{
\code{n.final}, vector of realized sample sizes, and \code{rejected},
logical vector indicating whether the null hypothesis was rejected in that simulation.
}
\description{
In simulations, data are collected in groups of 2 (1 from group a, and 1 from group b)
and s-values are evaluated after each group of 2 is collected. When an S-value
exceeds the critical value as defined by the alpha specified in the design,
that simulation is stopped, the null hypothesis is recorded to be rejected,
and the realized sample size is saved. One can then calculate the expected
sample size collected in the optional stopping setting, and the power of the S-value
in the optional stopping setting (see examples).
}
\details{
Side effects: plots a histogram of realized sample sizes in the optional
stopping setting.
}
\examples{
safeDesignProportionTest <- designSafeTwoProportions(deltaMin = 0.4, lowN = 80)
#sample size planned, according to design
safeDesignProportionTest$n.star

simulationResult <- simulateSpreadSampleSizeTwoProportions(safeDesignProportionTest,
M = 1000, parametersDataGeneratingDistribution = c(0.2, 0.6))
#what was the power?
mean(simulationResult$rejected)
#what sample size can be expected to be collected with optional stopping?
mean(simulationResult$actually_collected)

}
